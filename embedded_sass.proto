// Copyright 2019 Google Inc. Use of this source code is governed by an
// MIT-style license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

syntax = "proto3";

// The wrapper type for all messages sent from the host to the compiler. This
// provides a `oneof` that makes it possible to determine the type of each
// inbound message.
message InboundMessage {
  // A request that compiles an entrypoint to CSS.
  message CompileRequest {
    // This compilation's request id. This is included in messages sent from the
    // compiler to the host. Mandatory.
    uint32 id = 1;

    // Possible syntaxes for a Sass stylesheet.
    enum Syntax {
      // The CSS-superset `.scss` syntax.
      SCSS = 0;

      // The indented `.sass` syntax.
      INDENTED = 1;

      // Plain CSS syntax that doesn't support any special Sass features.
      CSS = 2;
    }

    // An input stylesheet provided as plain text, rather than loaded from the
    // filesystem.
    message StringInput {
      // The contents of the stylesheet.
      string source = 1;

      // The location from which `source` was loaded. If this is empty, it
      // indicates that the URL is unknown.
      string url = 2;

      // The syntax to use to parse `source`.
      Syntax syntax = 3;
    }

    // The input stylesheet to parse. Mandatory.
    oneof input {
      // A stylesheet loaded from its contents.
      StringInput string = 2;

      // A stylesheet loaded from the given path on the filesystem.
      string path = 3;
    }

    // Possible ways to format the CSS output. The compiler is not required to
    // support all possible options; if the host requests an unsupported style,
    // the compiler should choose the closest supported style.
    enum OutputStyle {
      // Each selector and declaration is written on its own line.
      EXPANDED = 0;

      // The entire stylesheet is written on a single line, with as few
      // characters as possible.
      COMPRESSED = 1;

      // CSS rules and declarations are indented to match the nesting of the
      // Sass source.
      NESTED = 2;

      // Each CSS rule is written on its own single line, along with all its
      // declarations.
      COMPACT = 3;
    }

    // How to format the CSS output.
    OutputStyle style = 4;

    // Whether to generate a source map. Note that this will *not* add a source
    // map comment to the stylesheet; that's up to the host or its users.
    bool source_map = 5;
  }

  // The wrapped message. Mandatory.
  oneof message {
    ProtocolError error = 1;
    CompileRequest compileRequest = 2;
  }
}

// The wrapper type for all messages sent from the compiler to the host. This
// provides a `oneof` that makes it possible to determine the type of each
// outbound message.
message OutboundMessage {
  // A response that contains the result of a compilation.
  message CompileResponse {
    // The compilation's request id. Mandatory.
    int32 id = 1;

    // A message indicating that the Sass file was successfully compiled to CSS.
    message CompileSuccess {
      // The compiled CSS.
      string css = 1;

      // The JSON-encoded source map, or the empty string if
      // `CompileRequest.source_map` was `false`.
      //
      // The compiler must not add a `"file"` key to this source map. It's the
      // host's (or the host's user's) responsibility to determine how the
      // generated CSS can be reached from the source map.
      string source_map = 2;
    }

    // A message indicating that the Sass file could not be successfully
    // compiled to CSS.
    message CompileFailure {
      // A message describing the reason for the failure.
      string message = 1;

      // The span associated with the failure. Optional.
      SourceSpan span = 2;

      // The stack trace associated with the failure.
      //
      // The empty string indicates that no stack trace is available. Otherwise,
      // the format of this stack trace is not specified and is likely to be
      // inconsistent between implementations.
      string stack_trace = 3;
    }

    // The success or failure result of the compilation. Mandatory.
    oneof result {
      // The result of a successful compilation.
      CompileSuccess success = 2;

      // The result of a failed compilation.
      CompileFailure failure = 3;
    }
  }

  // An event indicating that a message should be displayed to the user.
  message LogEvent {
    // The request id for the compilation that triggered the message. Mandatory.
    uint32 compilation_id = 1;

    // The type of message.
    enum Type {
      // A warning for something other than a deprecated Sass feature. Often
      // emitted due to a stylesheet using the `@warn` rule.
      WARNING = 0;

      // A warning indicating that the stylesheet is using a deprecated Sass
      // feature. Compilers should not add text like "deprecation warning" to
      // deprecation warnings; it's up to the host to determine how to signal
      // that to the user.
      DEPRECATION_WARNING = 1;

      // A message generated by the user for their own debugging purposes.
      DEBUG = 2;
    }
    Type type = 2;

    // The text of the message.
    string message = 3;

    // The span associated with this message. Optional.
    SourceSpan span = 4;

    // The stack trace associated with this message.
    //
    // The empty string indicates that no stack trace is available. Otherwise,
    // the format of this stack trace is not specified and is likely to be
    // inconsistent between implementations.
    string stack_trace = 5;
  }

  // The wrapped message. Mandatory.
  oneof message {
    ProtocolError error = 1;
    CompileResponse compileResponse = 2;
    LogEvent logEvent = 3;
  }
}

// An error reported when an endpoint violates the embedded Sass protocol.
message ProtocolError {
  // Potential types of errors.
  enum ErrorType {
    // A message was received that couldn't be decoded as an `InboundMessage`
    // (for the compiler) or `OutboundMessage` (for the host).
    PARSE = 0;

    // A message was received that violated a documented restriction, such as
    // not providing a mandatory field.
    PARAMS = 1;

    // Something unexpected went wrong within the endpoint.
    INTERNAL = 2;
  }
  ErrorType type = 1;

  // The ID of the request that had an error. This MUST be `-1` if the request
  // ID couldn't be determined, or if the error is being reported for a response
  // or an event.
  int32 id = 2;

  // A human-readable message providing more detail about the error.
  string message = 3;
}

// A chunk of a source file.
message SourceSpan {
  // The text covered by the source span. Compilers must guarantee that this is
  // the text between `start.offset` and `end.offset` in the source file
  // referred to by `url`.
  string text = 1;

  // A single point in a source file.
  message SourceLocation {
    // The 0-based offset of this location within the source file. Mandatory.
    uint32 offset = 1;

    // The 0-based line number of this location within the source file.
    // Mandatory.
    uint32 line = 2;

    // The 0-based column number of this location within its line. Mandatory.
    uint32 column = 3;
  }

  // The location of the first character in this span. Mandatory.
  SourceLocation start = 2;

  // The location of the first character after this span. Optional.
  //
  // If this is omitted, it indicates that the span is empty and points
  // immediately before [start]. In that case, [text] must be empty.
  //
  // This must not point to a location before `start`.
  SourceLocation end = 3;

  // The URL of the file to which this span refers.
  //
  // This may be empty, indicating that the span refers to a
  // `CompileRequest.StringInput` file that doesn't specify a URL.
  string url = 4;

  // Additional source text surrounding this span.
  //
  // If this isn't empty, it must contain `text`. Furthermore, `text` must begin
  // at column `start.column` of a line in `context`.
  //
  // This usually contains the full lines the span begins and ends on if the
  // span itself doesn't cover the full lines.
  string context = 5;
}
